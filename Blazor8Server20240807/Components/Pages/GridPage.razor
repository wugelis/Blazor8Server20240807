@page "/gridpage"
@using Application.Accounts
@using Application.Accounts.Models
@using Blazor8Server20240807.Components.Controls
@using Blazor8Server20240807.Models
@inject AccountService accountService

<h3>GridPage</h3>

<div>
    <EditForm Model="loginRequest" OnValidSubmit="AddAccount" FormName="MyAccountForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label>UserName:</label>
        <InputText class="form-control" @bind-Value="loginRequest.Username" />
        <ValidationMessage For="@(() => loginRequest.Username)" />

        <label>Password:</label>
        <InputText class="form-control" @bind-Value="loginRequest.Password" type="password"/>
        <ValidationMessage For="@(() => loginRequest.Password)" />

        <label>EMail:</label>
        <InputText class="form-control" @bind-Value="loginRequest.EMail" />
        <ValidationMessage For="@(() => loginRequest.EMail)" />

        <button type="submit" class="btn btn-primary" @onclick="AddAccount">新增</button>
    </EditForm>
</div>

<GridView DataSource="DataSource">
    <Columns ColumnName="使用者名稱"></Columns>
    <Columns ColumnName="使用者密碼"></Columns>
    <Columns ColumnName="電子信箱"></Columns>
</GridView>

@code {
    [SupplyParameterFromForm]
    public LoginRequest loginRequest { get; set; } = new LoginRequest();

    public IEnumerable<object>? DataSource { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var result = from o in accountService.GetAccounts()
        select new LoginRequest()
        {
            Username = o.Username,
            Password = o.Password,
            EMail = o.EMail
        };

        DataSource = await Task.FromResult(result);
    }

    async Task AddAccount()
    {
        LoginRequest account = new LoginRequest()
        {
            Username = loginRequest.Username,
            EMail = loginRequest.EMail
        };

        accountService.AddAccount(account);
    }
}
